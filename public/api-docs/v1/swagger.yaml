openapi: 3.0.1
info:
  title: Inpay Online Shop API
  version: v1

paths:
  /products:
    get:
      summary: Get all products
      tags: [Products]
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

    post:
      summary: Create a new product
      tags: [Products]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request - Missing required parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Bad Request - Missing required parameter"
        '422':
          description: Unprocessable Entity - Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Price can't be blank, Price must be greater than 0"

  /products/{id}:
    get:
      summary: Get a product by ID
      tags: [Products]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a product by ID
      tags: [Products]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request - Missing required parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Bad Request - Missing required parameter"
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Product with id 999 not found"
        '422':
          description: Unprocessable Entity - Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Price can't be blank, Price must be greater than 0"
    delete:
      summary: Delete a product by ID
      tags: [Products]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product deleted successfully
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders:
    get:
      summary: Get all orders
      tags: [Orders]
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

    post:
      summary: Create a new order
      tags: [Orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request - Missing required parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Bad Request - Missing required parameter"
        '404':
          description: Not Found - Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Product with id 999 not found"
        '422':
          description: Unprocessable Entity - Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Quantity can't be blank, Quantity must be greater than 0"

  /orders/{id}:
    get:
      summary: Get an order by ID
      tags: [Orders]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: An order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          example: 36
        name:
          type: string
          example: "adeu"
        description:
          type: string
          example: "no"
        price:
          type: number
          format: float
          minimum: 0
          example: 2.0
        stock_quantity:
          type: integer
          minimum: 0
          example: 3
        archived:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Order:
      type: object
      properties:
        id:
          type: integer
          example: 60
        status:
          type: string
          enum: [pending, processing, completed, cancelled]
          example: "pending"
        total_amount:
          type: string
          example: "2.0"
        order_items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    OrderItem:
      type: object
      properties:
        id:
          type: integer
          example: 38
        order_id:
          type: integer
          example: 60
        product_id:
          type: integer
          example: 36
        quantity:
          type: integer
          minimum: 1
          example: 1
        product:
          $ref: '#/components/schemas/Product'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    NewOrder:
      type: object
      required: [items]
      properties:
        items:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/NewOrderItem'

    NewOrderItem:
      type: object
      required: [product_id, quantity]
      properties:
        product_id:
          type: integer
          minimum: 1
          example: 36
        quantity:
          type: integer
          minimum: 1
          example: 1

    NewProduct:
      type: object
      required: [name, price, stock_quantity]
      properties:
        name:
          type: string
          minLength: 1
          example: "Product Name"
        description:
          type: string
          example: "Description of the product"
        price:
          type: number
          format: float
          minimum: 0
          example: 2.0
        stock_quantity:
          type: integer
          minimum: 0
          example: 3

    Error:
      type: object
      properties:
        error:
          oneOf:
            - type: string
              example: "Product with id 999 not found"
            - type: array
              items:
                type: string
              example: ["Price can't be blank", "Price must be greater than 0"]