<!DOCTYPE html>
<html>
<head>
  <title>Inpay Online Shop</title>
  <!-- CSRF token for secure form submissions -->
  <meta name="csrf-token" content="<%= form_authenticity_token %>">
  <%= stylesheet_link_tag 'shared', media: 'all' %>
</head>

<body>
<!-- Page Header with Title and Admin/User Navigation -->
<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
  <h1 style="margin: 0;">Inpay Online Shop</h1>

  <div>
    <%= link_to "My Orders", orders_path, class: "admin-button", style: "margin-right: 10px;" %>
    <!-- Conditional admin controls based on URL param -->
    <% if params[:admin] == "true" %>
      <%= link_to "Exit Admin", url_for(params.permit!.to_h.except("admin")), class: "admin-button" %>
      <%= link_to "Create Product", new_product_path, class: "admin-button", style: "margin-left: 10px;" %>
    <% else %>
      <%= link_to "Admin Access", url_for(params.permit!.to_h.merge(admin: "true")), class: "admin-button" %>
    <% end %>
  </div>
</div>

<!-- Product Listing Table -->
<table>
  <thead>
  <!-- Table Header with Column Titles -->
  <tr>
    <th>Product</th>
    <th>Description</th>
    <th>Price</th>
    <th>Stock</th>
    <th>Quantity</th>
    <th></th> <!-- For 'Add to Cart' button -->
    <% if params[:admin] == "true" %>
      <th></th> <!-- For 'Remove' button (admin only) -->
    <% end %>
  </tr>
  </thead>
  <tbody>
  <% @products.each do |product| %>
    <tr>
      <td><%= product.name %></td>
      <td><%= product.description %></td>
      <td>DKK <%= product.price %></td>
      <td><%= product.stock_quantity %></td>
      <!-- Quantity input -->
      <td><input type="number" id="qty_<%= product.id %>" min="1" max="<%= product.stock_quantity %>" value="1"></td>
      <!-- Add to cart button -->
      <td><button class="add-button" onclick="addToCart(<%= product.id %>, '<%= j product.name %>')">Add to Cart</button></td>
      <!-- Remove button (admin only) -->
      <% if params[:admin] == "true" %>
        <td>
          <%= button_to "Remove", product_path(product), method: :delete, data: { confirm: "Are you sure?" },
                        class: "remove-button", form: { style: "display:inline;" } %>
        </td>
      <% end %>
    </tr>
  <% end %>
  </tbody>
</table>

<!-- Cart Preview Section -->
<div class="cart-preview" id="cart">
  <table style="width: 100%; border-collapse: collapse;">
    <thead>
    <tr>
      <th colspan="5" style="text-align: left; font-size: 1.5rem; color: #3DF68F; padding: 1rem;">Cart</th>
    </tr>
    <tr>
      <th style="color:#3DF68F;">Product</th>
      <th style="color:#3DF68F;">Price</th>
      <th style="color:#3DF68F;">Quantity</th>
      <th style="color:#3DF68F;">Subtotal</th>
      <th></th>
    </tr>
    </thead>
    <tbody id="cart-items"></tbody>
  </table>
  <!-- Place Order Button -->
  <div style="text-align: right; margin-top: 1rem;">
    <button class="submit-button" onclick="submitCart()">Place Order</button>
  </div>
</div>

<!-- Cart JavaScript Logic -->
<script>
    // Holds the current items added to the cart
    let cart = [];

    // Add an item to the cart
    function addToCart(productId, productName) {
        const quantityInput = document.getElementById(`qty_${productId}`);
        const quantity = parseInt(quantityInput.value);
        // Find the price cell in the same row (3rd <td>)
        const priceCell = quantityInput.closest("tr").querySelector("td:nth-child(3)");
        // Get the numeric price from the text
        const price = parseFloat(priceCell.textContent.replace("DKK", "").trim());

        if (!quantity || quantity <= 0) return;

        const existing = cart.find(item => item.product_id === productId);
        if (existing) {
            existing.quantity += quantity;
        } else {
            // If it's new, add a new item to the cart array
            cart.push({ product_id: productId, quantity, name: productName, price });
        }

        // Re-render the cart with updated items
        renderCart();
        quantityInput.value = 1;
    }

    // Remove an item from the cart
    function removeFromCart(productId) {
        // Keep only items that are NOT the one being removed
        cart = cart.filter(item => item.product_id !== productId);
        renderCart();
    }

    // Render cart items to the cart table
    function renderCart() {
        const list = document.getElementById("cart-items");
        // Clear current content
        list.innerHTML = "";
        let total = 0;

        cart.forEach(item => {
            const subtotal = item.price * item.quantity;
            total += subtotal;

            // Create a new table row (<tr>) for this item
            const row = document.createElement("tr");
            row.innerHTML = `
              <td>${item.name}</td>
              <td>DKK ${item.price.toFixed(2)}</td>
              <td>${item.quantity}</td>
              <td>DKK ${subtotal.toFixed(2)}</td>
              <td><button class="remove-button" onclick="removeFromCart(${item.product_id})">Remove</button></td>
            `;
            list.appendChild(row);
        });

        // If the cart has items, add a total row
        if (cart.length > 0) {
            const totalRow = document.createElement("tr");
            totalRow.innerHTML = `
              <td colspan="3" style="text-align: right; font-weight: bold; padding-top: 1rem;">Total:</td>
              <td style="font-weight: bold; padding-top: 1rem;">DKK ${total.toFixed(2)}</td>
              <td></td>
            `;
            list.appendChild(totalRow);
        }
    }

    // Submit the cart as a POST form to /orders
    function submitCart() {
        const form = document.createElement("form");
        form.method = "POST";
        form.action = "/orders";

        // Get the CSRF token from the <meta> tag in the HTML <head>
        const csrf = document.querySelector("meta[name='csrf-token']");
        if (csrf) {
            // Hidden input for the CSRF token
            const token = document.createElement("input");
            token.type = "hidden";
            token.name = "authenticity_token";
            token.value = csrf.content;
            form.appendChild(token);
        }

        // For each item in the cart, add two hidden inputs: product_id and quantity
        cart.forEach(item => {
            const pid = document.createElement("input");
            pid.type = "hidden";
            pid.name = "items[][product_id]";
            pid.value = item.product_id;

            const qty = document.createElement("input");
            qty.type = "hidden";
            qty.name = "items[][quantity]";
            qty.value = item.quantity;

            form.appendChild(pid);
            form.appendChild(qty);
        });

        document.body.appendChild(form);
        form.submit();
    }
</script>
</body>
</html>
